<!DOCTYPE html>
<html>
<head>
    <title>Самое важное</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
    <link href="/stylesheets/site_state_style.css" rel="stylesheet">

    <style>
        body, 
        html {
            overflow: auto;
            height: auto;
        }
    </style>
</head>
    <body>
    <%- include('./partials/navbar'); %>

    <div class="container" id="main-content" data-link="<%= link %>">
        <div class="legend-block">
            <div class="block red"></div>
            <div class="text"> - элемент был удален</div>
        </div>
        <div class="legend-block">
            <div class="block yellow"></div>
            <div class="text"> - элемент был изменён</div>
        </div>
        <div class="legend-block">
            <div class="block green"></div>
            <div class="text"> - элемент был добавлен</div>
        </div>
        <div class="legend-block">
            <div class="block dot"></div>
            <div class="text"> - стиль был изменён</div>
        </div>
        <div class="lol"></div>
        <div class="frames">
            <iframe class="frame old" name="iframe" id="old-site" ></iframe>
            <iframe class="frame new" name="iframe" id="new-site" ></iframe>
        </div>
    </div>

    <!-- Скрипт подтягивает инфу с сайта -->

    <script defer>
        function getTextFromNode(node){
            if (!node
                || !node.childNodes[0]
                || node.childNodes[0].nodeName !== "#text")
                return "";
            return node.childNodes[0].nodeValue;
        }

        function compareContentNodes(node1, node2){
            let changes = {
                "nodes": [node1, node2]
            };
            BLACKLIST_PROPERTIES = ['__proto__'];

            let node1Text = getTextFromNode(node1);
            let node2Text = getTextFromNode(node2);
            // Text content
            if (node1Text != node2Text)
                changes['textContent'] = [node1Text, node2Text];

            // Styles
            for (const key of Object.keys(node1.style)){
                if (key in BLACKLIST_PROPERTIES)
                    continue;

                if (node1.style[key] != node2.style[key]){
                    if (!('styles' in changes))
                        changes['styles'] = [{}, {}];
                    changes['styles'][0][key] = node1.style[key];
                    changes['styles'][1][key] = node2.style[key];
                }
            }

            return changes;
        }

        function isMatchingPair(node1, node2){
            return node1.tagName === node2.tagName;
        }

        function compareNodeChilds(node1, node2){
            let pairsMatchedOfNode2 = new Set();
            let pairsToCompare = [];
            let changes = {"newElements": []};

            for(const childNode1 of node1.children){
                let matchingPair = null;

                for(const childNode2 of node2.children){
                    if (childNode2 in pairsMatchedOfNode2)
                        continue;

                    if (isMatchingPair(childNode1, childNode2)){
                        matchingPair = childNode2;
                        pairsMatchedOfNode2.add(childNode2);
                        break;
                    }
                }

                if (matchingPair){
                    pairsToCompare.push([childNode1, matchingPair]);
                } else {
                    changes["newElements"].push([childNode1, null]);
                }
            }

            for (const childNode2 of node2.children){
                if (pairsMatchedOfNode2.has(childNode2))
                    continue;
                changes["newElements"].push([null, childNode2]);
            }

            return {
                "pairsToCompare": pairsToCompare,
                "newElements": changes["newElements"]
            };
        }

        function getDOMObject(htmlContent){
            let parser = new DOMParser();
            return parser.parseFromString(htmlContent, "text/html");
        }

        function getDifferences(node1, node2, differences){
            if (!node1 || !node2)
                return null;
            let contentChanges = compareContentNodes(node1, node2);
            let childChanges = compareNodeChilds(node1, node2);
            let pairsToCompare = childChanges['pairsToCompare'];
            let newElems = childChanges['newElements'];

            if (Object.keys(contentChanges).length > 1){
                differences.push(contentChanges);
            }

            if (newElems.length > 0)
                differences.push({'newElems': newElems});

            for(const pair of pairsToCompare)
                getDifferences(pair[0], pair[1], differences);
        }

        function comparePages(html1DOM, html2DOM){
            let result = [];
            // let html1DOM = getDOMObject(html1);
            // let html2DOM = getDOMObject(html2);
            getDifferences(html1DOM.body, html2DOM.body, result);

            return result;
        }

        window.onload = function() {
            let link = new URL(window.location.href).searchParams.get("site-link");
            let data = JSON.stringify({
                "url": link
            });
            let xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            //Запрос в файл для получения содержимого страницы
            xhr.open("POST", '/api/screen/getsite');
            xhr.setRequestHeader("Content-Type", "application/json");

            xhr.onload = function() {
                // Запрос в базу данных
                let xhr2 = new XMLHttpRequest();
                xhr2.open("GET", "/test_site/test_site_change");

                xhr2.onload = function(){
                    let html1 = xhr.response;
                    let html2 = xhr2.response;

                    // var iframe = document.createElement('iframe');
                    // iframe.srcdoc = html1;
                    // iframe.src = "data:text/html;charset=utf-8," + escape(html1);
                    // console.log(iframe);
                    // document.querySelector('.frames').appendChild(iframe);
                    let ifr1 = document.querySelector('#old-site').contentDocument;
                    ifr1.open('text/html', 'replace');
                    ifr1.write(new XMLSerializer().serializeToString(getDOMObject(html1)));
                    ifr1.close();

                    let ifr2 = document.querySelector('#new-site').contentDocument;
                    ifr2.open('text/html', 'replace');
                    ifr2.write(html2);
                    ifr2.close();

                    let changes = comparePages(ifr1, ifr2);

                    for (const change of changes){
                        if ('newElems' in change){
                            for (const newElem of change['newElems']){
                                let elem = null;
                                if (newElem[0])
                                    newElem[0].style.backgroundColor = 'red';
                                if (newElem[1])
                                    newElem[1].style.backgroundColor = '#90EE90';
                            }
                        }

                        if ('textContent' in change){
                            change['nodes'][0].style.backgroundColor = 'yellow';
                            change['nodes'][1].style.backgroundColor = 'yellow';
                        }

                        if ('styles' in change){
                            change['nodes'][0].style.border = '2px dotted gray';
                            change['nodes'][1].style.border = '2px dotted gray';
                        }

                    }
                };

                xhr2.send();
            };

            xhr.send(data);
        };
    </script>
</body>
</html>
